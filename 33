from flask import Flask, request, jsonify, send_from_directory  # Flask 웹 프레임워크의 핵심 모듈들 불러오기
from flask_cors import CORS  # 다른 도메인에서의 요청(CORS)을 허용하기 위한 모듈
import os  # 파일 경로, 디렉토리 생성 등 운영체제 기능을 위한 모듈
from db_config import get_db_connection  # DB 연결을 위한 사용자 정의 함수 import
from werkzeug.utils import secure_filename  # 업로드 파일명을 안전하게 처리하는 함수
import re  # 정규 표현식 처리용 모듈
import uuid  # 고유한 문자열(ID) 생성을 위한 모듈


app = Flask(__name__)  # Flask 애플리케이션 인스턴스 생성
CORS(app, resources={r"/*": {"origins": "*"}})  # 모든 라우트에 대해 모든 도메인에서 요청 허용

# 업로드된 파일명을 안전하게 정제하는 함수
# 한글 포함 파일명을 허용하면서 특수문자 제거

def korean_secure_filename(filename):
    filename = filename.strip().replace(" ", "_")  # 앞뒤 공백 제거 및 공백을 밑줄로 변경
    filename = re.sub(r"[^ㄱ-ㅎ가-힣a-zA-Za-z0-9_.-]", "", filename)  # 지정된 문자 외 제거
    return filename

# 파일 업로드 경로 설정
UPLOAD_FOLDER = os.path.join(os.getcwd(), "uploads")  # 현재 디렉토리에 'uploads' 폴더 경로 생성
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER  # Flask 설정에 업로드 경로 지정

# -------------------------------
# 드라마 관련 API
# -------------------------------


# -------------------------------------------------
# 드라마 조회 엔드포인트 (전체 또는 특정 드라마)
# -------------------------------------------------

@app.route("/get-dramas", methods=["GET"])  # 전체 드라마 리스트 조회
@app.route("/get-drama/<int:drama_id>", methods=["GET"])  # 특정 드라마 조회

def get_drama(drama_id=None):
    db = get_db_connection()  # DB 연결
    cursor = db.cursor()  # 커서 객체 생성
    if drama_id is None:  # drama_id가 없으면 전체 조회
        cursor.execute("SELECT * FROM dramas")  # 모든 드라마 조회 쿼리
        dramas = cursor.fetchall()  # 결과 가져오기
        db.close()  # DB 연결 종료
        return jsonify(dramas), 200  # JSON 형태로 반환 (성공 코드 200)
    else:  # drama_id가 있으면 특정 드라마 조회
        cursor.execute("SELECT * FROM dramas WHERE id = %s", (drama_id,))  # 해당 ID의 드라마 조회
        drama = cursor.fetchone()  # 결과 1개 가져오기
        db.close()  # DB 연결 종료
        if not drama:  # 드라마 없을 경우 오류 반환
            return jsonify({"error": "드라마를 찾을 수 없습니다."}), 404
        return jsonify(drama), 200  # 성공적으로 조회 시 반환

# -------------------------------------------------
# 드라마 등록 엔드포인트
# -------------------------------------------------

@app.route("/add-drama", methods=["POST"])
def add_drama():
    title = request.form.get("title")  # 제목
    content = request.form.get("content")  # 내용
    is_secret = request.form.get("is_secret") in ["true", "on"]  # 비밀글 여부 (체크박스 처리)
    password = request.form.get("password") or None  # 비밀번호 (없으면 None)
    user_id = request.form.get("user_id")  # 작성자 ID
    try:
        user_id = int(user_id)  # 문자열을 정수형으로 변환
    except (ValueError, TypeError):  # 형 변환 실패 시 오류 처리
        return jsonify({"error": "잘못된 사용자 ID입니다."}), 400

    if not title or not content:  # 필수값 확인
        return jsonify({"error": "필수 항목이 누락되었습니다."}), 400

    if is_secret and not password:  # 비밀글인데 비밀번호가 없다면 오류
        return jsonify({"error": "비밀글 비밀번호를 입력해주세요."}), 400

    uploaded_file = request.files.get("attachment")  # 첨부파일 가져오기
    filename = None
    if uploaded_file and uploaded_file.filename:  # 파일이 있다면
        origin_name = korean_secure_filename(uploaded_file.filename)  # 한글 포함 안전 파일명 처리
        unique_id = uuid.uuid4().hex[:8]  # 고유 ID 생성
        filename = f"{unique_id}_{origin_name}"  # 고유 파일명 구성
        upload_folder = "uploads"
        os.makedirs(upload_folder, exist_ok=True)  # 업로드 폴더 없으면 생성
        uploaded_file.save(os.path.join(upload_folder, filename))  # 파일 저장

    db = get_db_connection()  # DB 연결
    cursor = db.cursor()
    cursor.execute("""
        INSERT INTO dramas (title, content, is_secret, password, filename, user_id)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (title, content, is_secret, password, filename, user_id))  # 드라마 삽입 쿼리 실행
    db.commit()  # 커밋으로 반영
    new_id = cursor.lastrowid  # 새로 삽입된 드라마 ID 가져오기
    db.close()  # DB 종료
    return jsonify({"message": "드라마 등록 성공", "id": new_id})  # 결과 반환

# -------------------------------------------------
# 드라마 삭제 엔드포인트
# -------------------------------------------------

@app.route("/delete-drama/<int:drama_id>", methods=["DELETE", "OPTIONS"])  # DELETE 또는 OPTIONS 메서드를 허용하는 엔드포인트
def delete_drama(drama_id):
    if request.method == "OPTIONS":  # 브라우저의 사전 요청(Preflight Request)에 대한 응답 처리
        return jsonify({"message": "CORS OK"}), 200  # CORS 허용 응답

    db = get_db_connection()  # DB 연결
    cursor = db.cursor()  # 커서 생성
    try:
        cursor.execute("DELETE FROM dramas WHERE id = %s", (drama_id,))  # 해당 ID의 드라마 삭제 쿼리 실행
        db.commit()  # DB 반영
        db.close()  # DB 연결 종료
        return jsonify({"message": "드라마 삭제 성공"}), 200  # 성공 응답 반환
    except Exception as e:
        db.rollback()  # 오류 발생 시 롤백
        db.close()  # DB 연결 종료
        return jsonify({"error": f"삭제 실패: {str(e)}"}), 500  # 오류 응답 반환

# -------------------------------------------------
# 드라마 수정 엔드포인트
# -------------------------------------------------

@app.route("/edit-drama/<int:id>", methods=["POST"])  # 드라마 수정을 위한 POST 요청 처리
def edit_drama(id):
    title = request.form.get("title")  # 제목 가져오기
    content = request.form.get("content")  # 내용 가져오기
    is_secret = request.form.get("is_secret") in ["true", "on"]  # 비밀글 여부 확인
    password = request.form.get("password") or None  # 비밀번호 가져오기 (없으면 None)

    if not title or not content:  # 제목 또는 내용이 비어 있으면 오류 응답
        return jsonify({"error": "제목과 내용을 입력하세요"}), 400

    if is_secret and not password:  # 비밀글인데 비밀번호가 없다면 오류 응답
        return jsonify({"error": "비밀글 비밀번호를 입력해주세요."}), 400

    uploaded_file = request.files.get("attachment")  # 첨부파일 가져오기
    filename = None
    if uploaded_file and uploaded_file.filename:  # 파일이 있다면
        origin_name = korean_secure_filename(uploaded_file.filename)  # 파일명 정제
        unique_id = uuid.uuid4().hex[:8]  # 고유한 식별자 생성
        filename = f"{unique_id}_{origin_name}"  # 저장할 파일 이름 구성
        upload_folder = "uploads"
        os.makedirs(upload_folder, exist_ok=True)  # 업로드 폴더가 없으면 생성
        uploaded_file.save(os.path.join(upload_folder, filename))  # 파일 저장

    db = get_db_connection()  # DB 연결
    cursor = db.cursor()  # 커서 생성
    cursor.execute("SELECT * FROM dramas WHERE id = %s", (id,))  # 해당 드라마 존재 여부 확인
    drama = cursor.fetchone()  # 조회 결과 가져오기
    if not drama:  # 드라마가 존재하지 않으면 오류 반환
        db.close()
        return jsonify({"error": "해당 드라마를 찾을 수 없습니다."}), 404

    # 드라마 정보 수정 쿼리 실행 (파일이 없으면 기존 파일 유지)
    cursor.execute("""
        UPDATE dramas
        SET title = %s, content = %s, is_secret = %s, password = %s, filename = IFNULL(%s, filename)
        WHERE id = %s
    """, (title, content, is_secret, password, filename, id))
    db.commit()  # DB 반영
    db.close()  # DB 종료
    return jsonify({"message": "드라마 수정 완료"}), 200

# -------------------------------------------------
# 사용자 관련 엔드포인트 - 로그인
# -------------------------------------------------

@app.route("/login", methods=["POST"])  # 로그인 요청 처리

def login():
    data = request.json  # JSON 데이터 받기
    username = data.get("id")  # 아이디 가져오기
    password = data.get("password")  # 비밀번호 가져오기
    if not username or not password:  # 누락 시 오류
        return jsonify({"error": "아이디와 비밀번호를 입력해주세요"}), 400

    db = get_db_connection()  # DB 연결
    cursor = db.cursor()
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))  # 사용자 조회
    user = cursor.fetchone()
    db.close()

    if user and user["password"] == password:  # 비밀번호 일치 시 로그인 성공
        return jsonify({"message": "로그인 성공", "user": user}), 200
    else:
        return jsonify({"error": "아이디 또는 비밀번호가 일치하지 않습니다"}), 401

# -------------------------------------------------
# 사용자 관련 엔드포인트 - 회원가입
# -------------------------------------------------

@app.route("/signup", methods=["POST"])  # 회원가입 처리

def signup():
    username = request.form.get("username")  # 아이디
    password = request.form.get("password")  # 비밀번호
    name = request.form.get("name")  # 이름
    school = request.form.get("school")  # 학교명
    file = request.files.get("profile_image")  # 프로필 이미지 파일

    if not (username and password and name and school):  # 필수 정보 누락 체크
        return jsonify({"error": "모든 필드를 입력해주세요"}), 400

    profile_filename = None
    if file:  # 이미지가 업로드되었다면 저장
        upload_folder = "uploads"
        os.makedirs(upload_folder, exist_ok=True)
        profile_filename = file.filename  # 원본 파일명 (주의: 보안상 secure_filename 권장)
        file.save(os.path.join(upload_folder, profile_filename))

    db = get_db_connection()
    cursor = db.cursor()
    try:
        cursor.execute("""
            INSERT INTO users (username, password, name, school, profile_image)
            VALUES (%s, %s, %s, %s, %s)
        """, (username, password, name, school, profile_filename))  # 사용자 정보 삽입
        db.commit()
        new_id = cursor.lastrowid  # 새로 생성된 유저 ID
        db.close()
        return jsonify({"message": "회원가입 성공", "id": new_id}), 201
    except Exception as e:
        db.rollback()
        db.close()
        return jsonify({"error": f"회원가입 실패: {str(e)}"}), 400

# -------------------------------------------------
# 사용자 정보 조회 엔드포인트
# -------------------------------------------------

@app.route("/user/<int:user_id>", methods=["GET"])  # GET 요청으로 사용자 정보 조회

def get_user(user_id):
    db = get_db_connection()  # DB 연결
    cursor = db.cursor()  # 커서 생성
    cursor.execute("SELECT id, username, name, school, profile_image FROM users WHERE id = %s", (user_id,))  # 사용자 조회 쿼리 실행
    user = cursor.fetchone()  # 조회 결과 반환
    db.close()  # DB 연결 종료
    if user:
        return jsonify(user), 200  # 사용자 정보 반환
    else:
        return jsonify({"error": "사용자를 찾을 수 없습니다."}), 404  # 사용자 없을 경우 오류 반환

# -------------------------------------------------
# 사용자 정보 수정 엔드포인트
# -------------------------------------------------

@app.route("/update-user/<int:user_id>", methods=["PUT", "POST"])  # PUT 또는 POST 메서드 허용

def update_user(user_id):
    name = request.form.get("name")  # 이름
    school = request.form.get("school")  # 학교명
    file = request.files.get("profile_image")  # 프로필 이미지 파일

    if not name or not school:  # 필수 값 누락 시 오류
        return jsonify({"error": "이름과 학교는 필수입니다"}), 400

    profile_filename = None
    if file:  # 이미지 업로드가 있는 경우
        upload_folder = "uploads"
        os.makedirs(upload_folder, exist_ok=True)
        profile_filename = file.filename
        file.save(os.path.join(upload_folder, profile_filename))

    db = get_db_connection()
    cursor = db.cursor()
    try:
        if profile_filename:
            # 이미지가 있을 경우 이미지 포함 업데이트
            cursor.execute("""
                UPDATE users
                SET name = %s, school = %s, profile_image = %s
                WHERE id = %s
            """, (name, school, profile_filename, user_id))
        else:
            # 이미지가 없으면 이름과 학교만 업데이트
            cursor.execute("""
                UPDATE users
                SET name = %s, school = %s
                WHERE id = %s
            """, (name, school, user_id))
        db.commit()
        cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))  # 최신 정보 재조회
        updated_user = cursor.fetchone()
        db.close()
        return jsonify({"message": "수정 성공", "user": updated_user}), 200
    except Exception as e:
        db.rollback()
        db.close()
        return jsonify({"error": f"수정 실패: {str(e)}"}), 500

# -------------------------------------------------
# 사용자 탈퇴 (삭제) 엔드포인트
# -------------------------------------------------

@app.route("/delete-user/<int:user_id>", methods=["DELETE", "OPTIONS"])  # 사용자 삭제 요청 처리

def delete_user(user_id):
    if request.method == "OPTIONS":  # 사전 요청 허용
        return jsonify({"message": "CORS preflight OK"}), 200
    db = get_db_connection()
    cursor = db.cursor()
    try:
        cursor.execute("DELETE FROM users WHERE id = %s", (user_id,))  # 삭제 쿼리 실행
        db.commit()
        db.close()
        return jsonify({"message": "회원탈퇴 성공"}), 200
    except Exception as e:
        db.rollback()
        db.close()
        return jsonify({"error": f"회원탈퇴 실패: {str(e)}"}), 500

# -------------------------------------------------
# 업로드된 파일 다운로드 처리
# -------------------------------------------------

@app.route("/uploads/<filename>")  # 업로드 파일을 URL로 접근 가능하게 제공

def uploaded_file(filename):
    return send_from_directory(app.config["UPLOAD_FOLDER"], filename, as_attachment=True)  # 파일을 다운로드 형태로 제공

# -------------------------------------------------
# 비밀글 비밀번호 확인 엔드포인트
# -------------------------------------------------

@app.route("/verify-password", methods=["POST"])
def verify_password():
    data = request.json  # JSON으로 요청 데이터 받기
    drama_id = data.get("id")  # 드라마 ID
    input_pw = data.get("password")  # 입력된 비밀번호

    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute("SELECT password FROM dramas WHERE id = %s AND is_secret = TRUE", (drama_id,))  # 비밀글인 경우만 조회
    row = cursor.fetchone()
    db.close()

    if not row:
        return jsonify({"error": "비밀글이 아니거나 존재하지 않습니다."}), 404

    if row["password"] == input_pw:  # 비밀번호 일치 확인
        return jsonify({"message": "비밀번호 확인 성공"}), 200
    else:
        return jsonify({"error": "비밀번호 불일치"}), 403

# -------------------------------------------------
# 아이디 찾기 엔드포인트
# -------------------------------------------------

@app.route("/find-id", methods=["POST"])
def find_id():
    data = request.json
    name = data.get("name")
    school = data.get("school")
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute("SELECT username FROM users WHERE name = %s AND school = %s", (name, school))  # 조건에 맞는 사용자 찾기
    user = cursor.fetchone()
    db.close()
    if user:
        return jsonify({"username": user["username"]}), 200
    else:
        return jsonify({"error": "일치하는 사용자가 없습니다."}), 404

# -------------------------------------------------
# 비밀번호 찾기 엔드포인트
# -------------------------------------------------

@app.route("/find-password", methods=["POST"])
def find_password():
    data = request.json
    username = data.get("username")
    name = data.get("name")
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute("SELECT password FROM users WHERE username = %s AND name = %s", (username, name))  # 사용자 확인 후 비밀번호 반환
    user = cursor.fetchone()
    db.close()
    if user:
        return jsonify({"password": user["password"]}), 200
    else:
        return jsonify({"error": "일치하는 사용자 정보가 없습니다."}), 404

# -------------------------------------------------
# Flask 앱 실행 진입점
# -------------------------------------------------

if __name__ == "__main__":  # 이 파일이 직접 실행될 경우만 아래 코드 실행
    app.run(debug=True)  # Flask 개발 서버 실행 (디버그 모드 활성화)